Introduction: functional programming, formally verified programming and proving.
Approaches to computational effects: chaos, ML-style, monads, algebraic effects.
A description of the inner workings of the library: design choices, file structure, implementation.
Examples: some from Just Do It, maybe some custom ones.
Safety: some theorems and proofs.
Theoretical comparison of the ease of use with Haskell and Idris.
Practical comparison with MERC.
Cite some literature: some Coq papers, Moggi, Just Do It, Experimenting with Monadic Equational Reasoning in Coq
Technical matters:
    Mention where's the implementation and put it to Coq's repository of user libraries.
    Installation guide.
    Tools: why no ssreflect?
    Documentation (it's in the source code).
More: a case study in proof engineering - how do the tactics hs, monad and (maybe) the one for reflective functor simplifcation work?
Deficiencies, conclusion and further work.
Points to make: this is a library for general purpose programming, without some deep goal.