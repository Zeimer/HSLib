digraph
{
  Foldable;

  Functor -> Applicative;
  Functor -> Monoidal;
  Applicative -> {CommutativeApplicative Alternative Monad};
  
  Monoid -> MonadWriter;
  Monad -> {MonadReader MonadWriter MonadState};
  Monad -> MonadExcept;
  Monad -> MonadFail;
  Monad -> MonadAlt;
  Functor -> MonadFree;
  Monad -> MonadFree;
  MonadState -> MonadStateNondet;
  MonadNondet -> MonadStateNondet;
  MonadFail -> MonadNondet;
  MonadAlt -> MonadNondet;
  
  Monad -> MonadTrans;
  
  {rank = same; MonadReader MonadWriter MonadState}
  {rank = same; CommutativeApplicative Alternative Monad}
  {rank = different; Monoid Monad}
}
